/* eslint-disable react/jsx-props-no-spreading */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Building63.glb --types
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { Group } from 'three';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Cube006: THREE.Mesh;
    Cube006_1: THREE.Mesh;
  };
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
  };
};

export default function Model({ transX, transY }: any) {
  const { nodes, materials } = useGLTF('/models/Building63.glb') as GLTFResult;
  const modelRef = useRef<Group>(null);
  useFrame(() => {
    if (modelRef.current !== null && transX && transY) {
      modelRef.current.rotation.y += transX / 3000;
      modelRef.current.rotation.x += transY / 3000;
    }
  });
  return (
    <group dispose={null} ref={modelRef} position={[0, -2.5, -2]} receiveShadow>
      <group rotation={[Math.PI, 0, Math.PI]} scale={[0.01, 0.03, 0.19]}>
        <mesh
          geometry={nodes.Cube006.geometry}
          material={materials['Material.002']}
        />
        <mesh
          geometry={nodes.Cube006_1.geometry}
          material={materials['Material.001']}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/models/Building63.glb');
